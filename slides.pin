#!/usr/bin/env pinpoint
# Copyright (C) Sebastian Pipping <sebastian@pipping.org>
# Licensed under CC-BY-SA 4.0

[rgb5347bf.ppm]
[fill]
[text-color=white]
[font=Metropolis 60px]
[shading-opacity=0.0]

--
*



<b>Python JSON Emoji Crash Story</b>

<i><span size='x-small'><tt>Sebastian Pipping &lt;sebastian@pipping.org&gt;</tt></span></i>




\--
<i><span size='x-small'>Berlin, 2020-02-18, v4
Licensed under CC-BY-SA 4.0</span></i>

--
<b>DISCLAIMER</b>

Slides were done with (GNOME pinpoint and)
very tight time constraints.

My apology, better slides next time!

--
<tt>1</tt>.

Django in Berlin at ~170 companies

-- [qrcodes/django_berlin_companies.png] [bottom-right]
https://github.com/hartwork/django-berlin#companies

--
<tt>2</tt>.

Who has a friend runningâ€¦
  - Django 3 &lt;3.0.1
  - Django 2 &lt;2.2.9
  - Django 1 &lt;1.11.27
?

--
Please consider upgrading!

<tt>CVE-2019-19844</tt>

Potential <b>account hijack</b>
via password reset form

-- [qrcodes/django_cve_2019_19844.png] [bottom-right]
https://www.djangoproject.com/weblog/2019/dec/18/security-releases/

--
<tt>3</tt>.

Who has a friend runningâ€¦

<tt>settings.DEBUG == True</tt>

â€¦accessible by public internet?

--
<tt>4</tt>.

Actual talk

--
<b>Python JSON Emoji Crash Story</b>

--
Tell a story

Point out a problem

Questions + Discussion

--
Environment:

  â€” Django backendâ€¦
      with Django REST Framework

  â€” A JavaScript frontend
      POST'ing JSON

--
<b>Flow of data</b>

<tt>1</tt>. User input
<tt>2</tt>. Form / HTML DOM
<tt>3</tt>. JavaScript
<tt>4</tt>. JSON (= ECMA-404)
<tt>5</tt>. HTTP request with body
<tt>6</tt>. Django REST Framework
<tt>7</tt>. <tt>rest_framework.parsers.JSONParser</tt>
<tt>8</tt>. De-serialization
<tt>9</tt>. <i>Some action</i> (e.g. store into database)

--
<b>Unicode</b>

<tt>U+0000</tt> â€” <tt>U+ffff</tt>
<b>B</b>asic <b>M</b>ultilingual <b>P</b>lane

<tt>U+10000</tt> â€” <tt>U+10ffff</tt>
16 "astral" planes

--
<b>Emoji</b>

beyond <tt>U+ffff</tt>

i.e. need more than 4 hex digits

--
<b>Example</b>

Character 'GRINNING FACE'

Code point: <tt>U+1F600</tt>
Example glyph: ðŸ˜€

--
<b>Unicode characters in JSON</b>

<tt>a</tt>) character itself as UTF-8
    (except <tt>U+0</tt> to <tt>U+1f</tt>, <tt>U+22</tt>, <tt>U+5C</tt>)

<tt>b</tt>) escaped a la (regex:) \\\\u[0-9a-fA-F]{4}

--
Works, Python 3:
<tt>
In [1]: import json

In [2]: json.loads('"ðŸ˜€"')  # plain UTF-8
Out[2]: 'ðŸ˜€'

In [3]: json.loads('"\\\\ud83d\\\\ude00"')
Out[3]: 'ðŸ˜€'
</tt>

--
<b>Surrogate Characters</b>

1024 "high" surrogates (<tt>U+D800</tt>â€“<tt>U+DBFF</tt>)
1024 "low" surrogates (<tt>U+DC00</tt>â€“<tt>U+DFFF</tt>)

Pair of surrogates allows "addressing"
any of the astral characters.

This is the very idea behind UTF-16.

(<tt>2**20 + 2**16 == 2**16 * 17</tt>)

--
Length of a string

--
Python 3:<tt>
In : len('ðŸ˜€')
Out: 1
</tt>
JavaScript:<tt>
>> 'ðŸ˜€'.length
&lt;- 2
</tt>

--
JavaScript:<tt>
>> 'ðŸ˜€'.split('')
&lt;- Array [ "\\ud83d", "\\ude00" ]
</tt>

--
What if buggy code italified like this?:

JavaScript:<tt>
>> my_text.replace(/./g, '&lt;em&gt;$&amp;&lt;/em&gt;')
</tt>

--
We send <i>single surrogates</i>

to the backend

--
JavaScript:<tt>
>> 'ðŸ˜€'.replace(/./g, '[$&amp;]').split('')
&lt;- Array(6) [ "[", "\\ud83d", "]", "[", "\\ude00", "]" ]
</tt>

--
How does <i>Python 3</i> deal with this?

--
Python 3:<tt>
In : json.loads('"[\\\\ud83d][\\\\ude00]"')
Out: '[\\ud83d][\\ude00]'
</tt>

--
Surrogates in isolation
   ==
invalid characters

--
Python 3:<tt>
In : json.loads('"[\\\\ud83d][\\\\ude00]"').encode('utf-8')
[..]
UnicodeEncodeError: 'utf-8' codec can't encode character
  '\\ud83d' in position 1: surrogates not allowed
</tt>

--
Fixed for <tt>CharField</tt>

in next release (3.12.0?) of

Django REST Framework

-- [qrcodes/drf_issue_7026.png] [bottom-right]
https://github.com/encode/django-rest-framework/issues/7026

--
"Unfixed" in CPython's JSON decoder

Considered a feature upstream

Potentially for good reasons

--
<i>"The RFC does not explicitly forbid JSON strings which contain byte sequences
that donâ€™t correspond to valid Unicode characters (e.g. unpaired UTF-16 surrogates),
but it does note that they may cause interoperability problems.

By default, this module accepts and outputs (when present in the original str)
code points for such sequences."</i>


<tt>https://docs.python.org/3/library/json.html#character-encodings</tt>

--
What about <i>other</i> JSON decoders?

--
<tt>hjson             â€” passes through

hyperjson         â€” error, weird message

ijson             â€” passes through, drops next char

jsonlib-python3   â€” error, good message; dead, buggy

orjson            â€” error, weird message

pysimdjson        â€” error, weird message; requires AVX2

python-rapidjson  â€” error, good message

simplejson        â€” passes through

ujson             â€” drops

yajl              â€” passes through, drops next char</tt>

--
What about TOML?

What about XML?

What about YAML?

--
TOML: <b>fine</b>!

--
Python 3:<tt>
In [1]: import tomlkit
In [2]: tomlkit.parse('k = "\\\\uDFFF"')
[..]
InvalidUnicodeValueError: Invalid unicode value at line 1 col 6
</tt>

--
XML: <b>fine</b>!

â€¦with regard to invalid characters

--
<b>ElementTree</b>, Python 3:<tt>
In [1]: import xml.etree.ElementTree as ET
In [2]: ET.fromstring('&lt;r&gt;&amp;#xd83d;&lt;/r&gt;')
[..]
ParseError: reference to invalid character number: line 1, column 3
</tt>

<b>minidom</b>, Python 3:<tt>
In [1]: from xml.dom.minidom import parseString
In [2]: parseString('&lt;r&gt;&amp;#xd83d;&lt;/r&gt;')
[..]
ExpatError: reference to invalid character number: line 1, column 3
</tt>

--
YAML: <b><i>not</i> fine</b>

--
Python 3:<tt>
In [1]: import yaml
In [2]: yaml.safe_load('"\\ud83d"').encode('utf-8')
[..]
UnicodeEncodeError: 'utf-8' codec can't encode character
  '\\ud83d' in position 0: surrogates not allowed
</tt>

--
<b>Playing with surrogate characters</b>

<tt># pip3 install surrogates</tt>

https://github.com/hartwork/surrogates#usage

--
<b>Consequences?</b>
  - <tt>.encode('utf-8')</tt> can fail
  - Produce error 500 on any(?) DRF deployed today
  - (Read unmasked Django secrets if <tt>DEBUG=True</tt>)
  - Catch early onceâ€¦ or late everywhere
  - ?

<b>Coping strategies?</b>


<b>Thank you!</b>

<i><span size='x-small'><tt>Sebastian Pipping &lt;sebastian@pipping.org&gt;</tt></span></i>
